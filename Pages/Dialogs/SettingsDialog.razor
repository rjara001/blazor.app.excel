
@using BlazorAppExcel.Models;
@using BlazorAppExcel.Share.Enums
@using BlazorAppExcel.Share.Models
@inject ISnackbar Snackbar
@using BlazorAppExcel.Components.Cells

<Dialog>
    <TitleContent>
        <Text Typo="Typo.h6">
            <Icon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1"/>
            Settings Item
        </Text>
    </TitleContent>
    <DialogContent>

        @foreach (var (item, index) in Columns.Select((item, index) => (item, index)))
        {
            var typeSelected = ExcelCellTypeUtil.GetTypeFromValue(this.Types[index]).ToString();

            <CellSelectElement Index="@index" Name="@item" Value="@typeSelected" Values="@Items" OnChildParameterChanged="UpdateChildParameter"></CellSelectElement>
        }
    </DialogContent>
    <DialogActions>
        <Button OnClick="SaveItem">Save</Button>
        <Button OnClick="Cancel">Cancel</Button>

    </DialogActions>
</Dialog>

@code {
    IDictionary<string,string> Items = ExcelCellTypeUtil.GetEnumDictionary();

    [Parameter] public IList<string> Columns { get; set; }
    [Parameter] public IList<int> Types { get; set; }
    [Parameter] public Action<IList<int>> Save { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void UpdateChildParameter(KeyValuePair<int, string> item)
    {
        this.Types[item.Key] = Convert.ToInt16(item.Value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // this.StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();

    private void SaveItem()
    {
        Save(Types);

    }

}
