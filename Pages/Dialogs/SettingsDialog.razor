@using BlazorAppExcel.Share.Enums
@implements IDialogContentComponent<DialogMessageSimple>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            Settings Item
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveItem">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@Cancel">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    @foreach (var (item, index) in Columns.Select((item, index) => (item, index)))
    {
        var typeSelected = ExcelCellTypeUtil.GetTypeFromValue(this.Types[index]).ToString();

        <CellSelectElement Index="@index" Name="@item" Value="@typeSelected" Values="@Items" OnChildParameterChanged="UpdateChildParameter"></CellSelectElement>
    }
</FluentDialogBody>

@code {
    IDictionary<string,string> Items = ExcelCellTypeUtil.GetEnumDictionary();

    [Parameter] public IList<string> Columns { get; set; }
    [Parameter] public IList<int> Types { get; set; }
    [Parameter] public Action<IList<int>> Save { get; set; }
    [Parameter]
    public DialogMessageSimple Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void UpdateChildParameter(KeyValuePair<int, string> item)
    {
        this.Types[item.Key] = Convert.ToInt16(item.Value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // this.StateHasChanged();
    }

    async Task Cancel() => await Dialog.CancelAsync();

    private async Task SaveItem()
    {
        Save(Types);
        await Dialog.CancelAsync();
    }

}
