@implements IDialogContentComponent<DialogMessageSimple>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Content.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>

    @foreach (var item in RowExcel.Cells)
    {
        <CellEdit Item="@item" UniqueValues="@UniqueValues(item.Name)"></CellEdit>
    }
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveItem">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@Cancel">Cancel</FluentButton>
</FluentDialogFooter>


@code {
    [Parameter] public RowCellExcel RowExcel { get; set; }
    [Parameter] public Action<RowCellExcel> Save { get; set; }

    [Parameter] public TableExcel TableExcel { get; set; }

    [Parameter]
    public DialogMessageSimple Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    public IDictionary<string, string> Values = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    private IList<string> UniqueValues(string name)
    {
        Util.LoadUniqueValues(TableExcel);

        if (TableExcel.UniqueValues.ContainsKey(name))
            return TableExcel.UniqueValues[name];

        return new List<string>();
    }

    private async Task Cancel()
    {
        await Dialog.CloseAsync();
    }

    private async Task SaveItem()
    {
        this.Save(RowExcel);
        await Dialog.CloseAsync();
    }

}
