@using BlazorAppExcel.Components.Cells
@using BlazorAppExcel.Components.Columns
@using BlazorAppExcel.Components.atomic
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models
@using BlazorAppExcel.Pages.Dialogs
@using BlazorAppExcel.Share.Enums
@using BlazorAppExcel.Share.Models
@using System.Linq;

@inject ISessionSingletonService session
@inject IExcelService excel;

@page "/design/columns/{IdTableSelected?}"

@if (_tables != null && _tables.Count() > 0)
{

    <Dropdown>
        <DropdownToggleButton Color="ButtonColor.Secondary">@this.TableSelectedText() </DropdownToggleButton>
        <DropdownMenu>
               @foreach (TableExcel item in this._tables)
                {
                    <DropdownItem @onclick="@(()=>OnTableSelected(item))" To="#" Type="ButtonType.Button">@item.Name</DropdownItem>
                }
            
        </DropdownMenu>
    </Dropdown>
}
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" style="width:180px"></th>
                <th scope="col" style="width:180px">Colors</th>
                <th scope="col">Name</th>
                <th scope="col">Type</th>

            </tr>
        </thead>
        <tbody>
            @if (TableSelected != null)
            {

                @for (int index = 0; index < this.TableSelected.GetColumnTables.Count; index++)
                {
                    ColumnTable item = this.TableSelected.GetColumnTables[index];
                    var indexItem = index;
                    <tr>
                        <td scope="row">

                            <a @onclick:preventDefault="true" @onclick="@(e => OnDeleteItem(item, indexItem))" href="#" class="text-decoration-none">
                                <Icon Name="IconName.Trash"></Icon>
                            </a>
                            @if (@item.Type == ExcelCellType.Unique || @item.Type == ExcelCellType.Boolean)
                            {
                                <a @onclick:preventDefault="true" @onclick="@(()=>ShowColorDialog(indexItem, item))" href="#" class="text-decoration-none">
                                    <i class="bi bi-palette"></i>

                                </a>
                            }
                        </td>
                        <td><ColorList CellSettingValues="@UniqueValues(item.Name)"></ColorList></td>
                        <td>
                            @if (this._editableNameColumn == item.Key)
                            {
                                <CellTextElement Value="@item.Name" Name="@item.Name" OnChildParameterChanged="@((value)=>UpdateChildParameter(value, item))" OnBlur="@(()=>this._editableTypeColumn=String.Empty)"></CellTextElement>
                            }
                            else
                            {
                                <div onclick="@(()=>EditNameColumn(item.Key))">@item.Name</div>
                            }
                        </td>
                        <td>
                            @if (this._editableTypeColumn == item.Key)
                            {
                                <CellSelectElement Index="@index" Value="@item.IdType.ToString()" Values="@GetTypes()" OnChildParameterChanged="@((string e)=>UpdateType(indexItem, e, item))" OnBlur="@(()=>this._editableTypeColumn=String.Empty)"></CellSelectElement>

                            }
                            else
                            {
                                <div onclick="@(()=>EditTypeColumn(item.Key))">@item.Type.ToString()</div>
                            }
                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>

</div>

<Button onclick="@AddItem" Color="ButtonColor.Primary" Size="Size.Small">Add Item</Button>
<ConfirmDialog @ref="dialog" />
<Modal @ref="_dialog" />

@code {
    private string _idTableSelected = null;
    private TableExcel TableSelected;
    private IList<TableExcel> _tables = null;
    private string _editableTypeColumn = string.Empty;
    private string _editableNameColumn = string.Empty;
    Modal _dialog = default!;

    private ConfirmDialog dialog = default!;

    public void OnTableSelected(TableExcel tableExcel)
    {
        this.TableSelected = tableExcel;
    }

    [Parameter] public string IdTableSelected { get
        {
            if (this._tables.Count() > 0 && this._idTableSelected == null)
                this._idTableSelected = this._tables[0].Id;

            return this._idTableSelected;
        }
        set
        {
            this._idTableSelected = value;
        }
    }

    private IList<CellSettingValue> UniqueValues(string name)
    {
        var list = this.TableSelected.getUniqueValues(name);

        return list;
    }

    private string TableSelectedText()
    {
        if (this.TableSelected == null)
            return "(Select a Table)";

        return this.TableSelected.Name;
    }

    private string IdColumn { get; set; }


    private async void ShowColorDialog(int index, ColumnTable item)
    {
        var list = this.TableSelected.getUniqueValues(item.Name);

        var parameters = new Dictionary<string, object>();
        parameters.Add("Column", item);
        parameters.Add("UniqueValues", list);
        parameters.Add("Cancel", (Action)(async () => await _dialog.HideAsync()));
        parameters.Add("Save", (Action<IList<CellSettingValue>>)((row) => this.OnSaveColorSetting(row, item)));

        await _dialog.ShowAsync<EditColorSettingDialog>(title: $"Editing Colors {item.Name}", parameters: parameters);
    }

    private async void UpdateChildParameter(string value, ColumnTable item)
    {
        Console.WriteLine("value:" + value);

        int index = this.TableSelected.Columns.IndexOf(item.Name);

        this.TableSelected.Columns[index] = value;

        await excel.SetUser(session.User, TableSelected);

    }

    private async void OnSaveColorSetting(IList<CellSettingValue> values, ColumnTable item)
    {
        TableSelected.setUniqueValues(item.Name, values);

        await excel.SetUser(session.User, TableSelected);

        await _dialog.HideAsync();
    }

    private async void OnDeleteItem(ColumnTable item, int index)
    {
    
            var confirmation = await dialog.ShowAsync(
    title: "Are you sure you want to delete this?",
    message1: "This will delete the record. Once deleted can not be rolled back.",
    message2: "Do you want to proceed?");

            if (confirmation)
            {
                // do something
                DeleteColumn(item, index);
                }


    }

    private async void DeleteColumn(ColumnTable item, int index)
    {
        TableSelected.Types.RemoveAt(index);
        TableSelected.Columns.Remove(item.Key);

        foreach (RowExcel row in TableSelected.Rows)
        {
            if (row.Values.Count>index)
                row.Values.RemoveAt(index);
        }

        await excel.SetUser(session.User, TableSelected);

        this.StateHasChanged();
    }

    private async void OnSaveTypeChanges(ExcelCellType type, int index)
    {

        TableSelected.Types[index] = (int)type;

        await excel.SetUser(session.User, TableSelected);
    }

    private async Task OnSaveChanges(string value, ColumnTable item, int index)
    {

        TableSelected.Columns[index] = value;

        TableSelected.Types[index] = item.IdType;

        await excel.SetUser(session.User, TableSelected);
    }

    private async void UpdateType(int index, string newValue, ColumnTable item)
    {
 
        item.IdType = Convert.ToInt16(newValue);

        await OnSaveChanges(item.Name, item, index);
    }

    private void EditTypeColumn(string keyColumn)
    {

        this._editableTypeColumn = keyColumn;
        this.StateHasChanged();
    }

    private void EditNameColumn(string keyColumn)
    {

        this._editableNameColumn = keyColumn;
        this.StateHasChanged();
    }

    private IDictionary<string, string> GetTypes()
    {
        var obj = Enum.GetValues(typeof(ExcelCellType)).Cast<ExcelCellType>().ToDictionary(
                                                                        e => ((int)e).ToString(),
                                                                        e => e.ToString());

        return obj;
    }

    async void AddItem()
    {

        this.TableSelected.Columns.Add("new column");
        this.TableSelected.Types.Add((int)Share.Enums.ExcelCellType.String);

        foreach (RowExcel row in TableSelected.Rows)
        {
            row.Values.Add("");
        }

        await this.excel.SetUser(session.User, this.TableSelected);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this._tables = this.session.User.TablesToList();

        Task.Run(() =>
        {
            foreach (var item in this._tables)
            {
                item.EnsureListsBalanced();
            }
        });

       

    }

    Func<TableExcel, string> converter = p => p?.Name;

    Func<ExcelCellType, string> converterEnum = p => p.ToString();
}
