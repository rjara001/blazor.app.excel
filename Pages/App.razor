@page "/app/{value}"
@using BlazorAppExcel.Components
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models

@using BlazorAppExcel.Pages.Dialogs
@using Blazored.LocalStorage
@using BlazorAppExcel.Share.Models;

@inject IUserSingletonService userServices;
@inject IDialogService DialogService;
@inject IExcelService excelService

<h3>App @Value</h3>


<button class="btn btn-primary" @onclick="AddNew">
    <i class="glyphicon glyphicon-plus"></i> Add
</button>
<button class="btn btn-primary" @onclick="Settings">
    <i class="glyphicon glyphicon-plus"></i> Settings
</button>

<TableDynamic table=@table @ref="childComponentRef" OnEdit="Edit" OnDelete="Delete" AllowedEdit="true"></TableDynamic>

@code {
    private TableExcel table;                                                                                                
    private TableDynamic childComponentRef;

    [Parameter]
    public string Value { get; set; }

    IDialogReference _dialogTable;
    IDialogReference _dialogSettings;

    private async void Delete(int index)
    {
        if (this.table.Rows.Count() >= index)
        {
            var item = this.table.Rows[index];
            this.table.Rows.Remove(item);
            await this.excelService.saveAsync(this.table);

            this.StateHasChanged();
        }
    }

    private void Edit(RowCellExcel row)
    {
        var parameters = new DialogParameters<EditDialog>();
        parameters.Add(x => x.RowExcel, row);
        parameters.Add(x => x.Save, this.OnSave);
        parameters.Add(x => x.TableExcel, table);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        _dialogTable = DialogService.Show<EditDialog>("Simple Dialog", parameters, options);
    }

    private void AddNew()
    {
        IList<string> columns = table.Columns.Values.Select(value => value.ToString()).ToList();

        RowCellExcel _newRow = RowCellExcel.AddRow(columns, table.Types, table.Rows.Count()+1);

        var parameters = new DialogParameters<EditDialog>();
        parameters.Add(x => x.RowExcel, _newRow);
        parameters.Add(x => x.Save, this.OnSave);
        parameters.Add(x => x.TableExcel, table);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        _dialogTable = DialogService.Show<EditDialog>("Simple Dialog", parameters, options);

    }

    private void Settings()
    {
        var parameters = new DialogParameters<SettingsDialog>();
        parameters.Add(x => x.Columns, this.table.Columns.Values.ToList());
        parameters.Add(x => x.Types, this.table.Types);
        parameters.Add(x => x.Save, this.OnSaveType);

        _dialogSettings = DialogService.Show<SettingsDialog>("Simple Dialog", parameters);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        table = userServices.User.TableActive;
    }

    public async void OnSaveType(IList<int> types)
    {
        this.table.Types = types;

        await this.excelService.saveAsync(this.table);

        _dialogSettings.Close();

    }

    public async void OnSave(RowCellExcel row)
    {
        RowExcel item = null;

        if (this.table.Rows.Count() < row.Id)
        {
            item = row.NewRowExcel();
            this.table.Rows.Add(item);
        }
      
        else
            item = this.table.Rows[row.Id];

        for (int i = 0; i < row.Columns.Count; i++)
        {
            item.Values[i] = row.Cells[i].Value;
        }

        await this.excelService.saveAsync(this.table);

        _dialogTable.Close();

        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }
}
