@page "/work/tables/{value}"
@using BlazorAppExcel.Components
@using BlazorAppExcel.Components.Work
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models

@using BlazorAppExcel.Pages.Dialogs
@using Blazored.LocalStorage
@using BlazorAppExcel.Share.Models;
@using System.Data

@inject ISessionSingletonService session;
@inject IExcelService excelService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;

<style>
    /* Custom CSS */
    .inline {
        display: inline-block; /* Set display property to inline-block */
    }
</style>

<NameTableElement Table="@table"></NameTableElement>

<div class="btn-group" role="group" aria-label="Basic example">
    <button type="button" class="btn btn-primary" @onclick="AddNew">
        <i class="bi bi-plus-circle-fill"></i> Add
    </button>
    <button type="button" class="btn btn-primary" @onclick="Settings">
        <i class="bi bi-gear-fill"></i> Settings
    </button>
    <button type="button" class="btn btn-primary" @onclick="Download">
        <i class="bi bi-cloud-download"></i> Download
    </button>

    <button type="button" class="btn btn-primary" @onclick="CopyAllSelected">
        <i class="bi bi-copy"></i> Copy
    </button>

    <button type="button" class="btn btn-primary" @onclick="DeleteAllSelected">
        <i class="bi bi-trash"></i> Delete
    </button>

    <button type="button" class="btn btn-primary" @onclick="AddingUpLoad">
        <i class="bi bi-cloud-plus"></i> Adding Upload
    </button>
</div>

<TableDynamic table=@table @ref="tableDynamicComponentRef" OnEdit="Edit" OnDelete="Delete" AllowedEdit="true" OnSaveColumn="OnSaveColumn" OnChangeCellValue="ChangeCellValue"></TableDynamic>

<Modal @ref="_dialogTable" />
<Modal @ref="_dialogSettings" />

@code {
    private TableExcel table;                                                                                                
    private TableDynamic childComponentRef;
    private ConfirmDialog dialog = default!;
    private TableDynamic tableDynamicComponentRef;

    [Parameter]
    public string Value { get; set; }

    Modal _dialogTable = default!;
    Modal _dialogSettings = default!;

    private TableDynamic tableDynamic = default!;

    private void AddingUpLoad()
    {
        NavigationManager.NavigateTo($"design/upload/{table.Name}");
    }

    private async void ChangeNameTable(string value)
    {
        await this.excelService.ChangeTableName(session.User, this.table, value);
    }

    private async void Delete(int index)
    {
        if (this.table.Rows.Count() >= index)
        {
            var item = this.table.Rows[index];
            this.table.Rows.Remove(item);

            await this.excelService.SetUser(session.User, table);

            this.StateHasChanged();
        }
    }

    private async void ChangeCellValue(string value)
    {
        await this.excelService.SetUser(session.User, table);
    }

    private async void OnSaveColumn(int index, string value)
    {

        this.table.Columns[index].Key = value;

        await this.excelService.SetUser(session.User, this.table);
    }

    private async void Edit(RowCellExcel row)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RowExcel", row);
        parameters.Add("Save", (Action<RowCellExcel>)((row) => this.OnSave(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogTable.HideAsync()));
        parameters.Add("TableExcel", table);

        await _dialogTable.ShowAsync<EditDialog>(title: "Editing Record", parameters: parameters);

    }


    private async void AddNew()
    {
        IList<string> columns = table.Columns.Select(_=>_.Text).ToList();

        RowCellExcel _newRow = RowCellExcel.AddRow(columns, table.Types, table.Rows.Count()+1);

        var parameters = new Dictionary<string, object>();
        parameters.Add("RowExcel", _newRow);
        parameters.Add("Save", (Action<RowCellExcel>)((row) => this.OnSave(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogTable.HideAsync()));
        parameters.Add("TableExcel", table);

        await _dialogTable.ShowAsync<EditDialog>(title: "Creating Record", parameters: parameters);

    }

    private async void Settings()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Columns", this.table.Columns);
        parameters.Add("Types", this.table.Types.Select(_ => Convert.ToString(_)).ToList());
        parameters.Add("Save", (Action<IList<string>>)((row) => this.OnSaveType(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogSettings.HideAsync()));

        await _dialogSettings.ShowAsync<SettingsDialog>(title: "Setting Types", parameters: parameters);
    }

    private async void Download()
    {

        try
        {

            var result = Util.getDSToExcel(this.table);

            await JSRuntime.InvokeVoidAsync("saveAsFile", $"{this.table.Name}.xlsx", result);

        }
        catch(Exception e)
        {
            Console.Write(e);
        }


        // Download the file


    }

    protected async void CopyAllSelected()
    {
        this.tableDynamicComponentRef.CopyRowsSelected();

        await this.excelService.SetUser(session.User, table);
    }

    protected async void DeleteAllSelected()
    {
        this.tableDynamicComponentRef.DeleteRowsSelected();

        await this.excelService.SetUser(session.User, table);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        table = session.User.TableActive;
    }

    public async void OnSaveType(IList<string> types)
    {
        this.table.Types = types.Select(_=>Convert.ToInt32(_)).ToList();

        await this.excelService.SetUser(session.User, table);

        await _dialogSettings.HideAsync();

    }

    public async void OnSave(RowCellExcel row)
    {
        table = RowCellExcel.AddRow(this.table, row);

        session.User.Tables[this.table.Name] = table;

        await this.excelService.SetUser(session.User, table);

        await _dialogTable.HideAsync();

        await this.tableDynamicComponentRef.Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await JSRuntime.InvokeVoidAsync("setModalDraggableAndResizable");
    //     await base.OnAfterRenderAsync(firstRender);
    // }
}
