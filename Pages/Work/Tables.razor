@page "/work/tables/{value}"
@using BlazorAppExcel.Components
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models

@using BlazorAppExcel.Pages.Dialogs
@using Blazored.LocalStorage
@using BlazorAppExcel.Share.Models;
@using System.Data

@inject ISessionSingletonService session;
@* @inject IDialogService DialogService; *@
@inject IExcelService excelService
@inject IJSRuntime JSRuntime

<h3>App @Value</h3>


<button class="btn btn-primary" @onclick="AddNew">
    <i class="glyphicon glyphicon-plus"></i> Add
</button>
<button class="btn btn-primary" @onclick="Settings">
    <i class="glyphicon glyphicon-plus"></i> Settings
</button>
<button class="btn btn-primary" @onclick="Download">
    <i class="glyphicon glyphicon-plus"></i> Download
</button>

<button class="btn btn-primary" @onclick="CopyAllSelected">
    <i class="glyphicon glyphicon-plus"></i> Copy
</button>

<button class="btn btn-primary" @onclick="DeleteAllSelected">
    <i class="glyphicon glyphicon-plus"></i> Delete
</button>


<TableDynamic table=@table @ref="tableDynamicComponentRef" OnEdit="Edit" OnDelete="Delete" AllowedEdit="true" OnSaveColumn="OnSaveColumn"></TableDynamic>

<Modal @ref="_dialogTable" />
<Modal @ref="_dialogSettings" />
@code {
    private TableExcel table;                                                                                                
    private TableDynamic childComponentRef;

    private TableDynamic tableDynamicComponentRef;

    [Parameter]
    public string Value { get; set; }

    Modal _dialogTable = default!;
    Modal _dialogSettings = default!;
    private TableDynamic tableDynamic = default!;

    private async void Delete(int index)
    {
        if (this.table.Rows.Count() >= index)
        {
            var item = this.table.Rows[index];
            this.table.Rows.Remove(item);

            await this.excelService.SetUser(session.User, table);

            this.StateHasChanged();
        }
    }

    private async void OnSaveColumn(int index, string value)
    {

        this.table.Columns[index] = value;

        await this.excelService.SetUser(session.User, this.table);
    }

    private async void Edit(RowCellExcel row)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RowExcel", row);
        parameters.Add("Save", (Action<RowCellExcel>)((row) => this.OnSave(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogTable.HideAsync()));
        parameters.Add("TableExcel", table);

        await _dialogTable.ShowAsync<EditDialog>(title: "Editing Record", parameters: parameters);
    }


    private async void AddNew()
    {
        IList<string> columns = table.Columns;

        RowCellExcel _newRow = RowCellExcel.AddRow(columns, table.Types, table.Rows.Count()+1);

        var parameters = new Dictionary<string, object>();
        parameters.Add("RowExcel", _newRow);
        parameters.Add("Save", (Action<RowCellExcel>)((row) => this.OnSave(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogTable.HideAsync()));
        parameters.Add("TableExcel", table);

        await _dialogTable.ShowAsync<EditDialog>(title: "Creating Record", parameters: parameters);

    }

    private async void Settings()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Columns", this.table.Columns);
        parameters.Add("Types", this.table.Types.Select(_ => Convert.ToString(_)).ToList());
        parameters.Add("Save", (Action<IList<string>>)((row) => this.OnSaveType(row)));
        parameters.Add("Cancel", (Action)(async () => await _dialogSettings.HideAsync()));

        await _dialogSettings.ShowAsync<SettingsDialog>(title: "Setting Types", parameters: parameters);
    }

    private async void Download()
    {

        try
        {

            var result = Util.getDSToExcel(this.table);

            await JSRuntime.InvokeVoidAsync("saveAsFile", $"{this.table.Name}.xlsx", result);

        }
        catch(Exception e)
        {
            Console.Write(e);
        }


        // Download the file


    }

    protected async void CopyAllSelected()
    {
        this.tableDynamicComponentRef.CopyRowsSelected();

        await this.excelService.SetUser(session.User, table);
    }

    protected async void DeleteAllSelected()
    {
        this.tableDynamicComponentRef.DeleteRowsSelected();

        await this.excelService.SetUser(session.User, table);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        table = session.User.TableActive;
    }

    public async void OnSaveType(IList<string> types)
    {
        this.table.Types = types.Select(_=>Convert.ToInt32(_)).ToList();

        await this.excelService.SetUser(session.User, table);

        await _dialogSettings.HideAsync();

    }

    public async void OnSave(RowCellExcel row)
    {
        RowExcel item = null;

 
        RowCellExcel.AddRow(this.table, row);
    

        await this.excelService.SetUser(session.User, table);

        await _dialogTable.HideAsync();

        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await JSRuntime.InvokeVoidAsync("setModalDraggableAndResizable");
    //     await base.OnAfterRenderAsync(firstRender);
    // }
}
