@page "/work/tables/{value}"
@using BlazorAppExcel.Components
@using BlazorAppExcel.Components.atomic
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models

@using BlazorAppExcel.Pages.Dialogs
@using Blazored.LocalStorage
@using BlazorAppExcel.Share.Models;

@inject ISessionSingletonService session;
@inject IDialogService DialogService;
@inject IExcelService excelService

<h3>App @Value</h3>


<button class="btn btn-primary" @onclick="AddNew">
    <i class="glyphicon glyphicon-plus"></i> Add
</button>
<button class="btn btn-primary" @onclick="Settings">
    <i class="glyphicon glyphicon-plus"></i> Settings
</button>

<TableDynamic table=@table @ref="childComponentRef" OnEdit="Edit" OnDelete="Delete" AllowedEdit="true" OnSaveColumn="OnSaveColumn"></TableDynamic>

@code {
    private TableExcel table;                                                                                                
    private TableDynamic childComponentRef;

    [Parameter]
    public string Value { get; set; }

    IDialogReference _dialogTable;
    IDialogReference _dialogSettings;

    private async void Delete(int index)
    {
        if (this.table.Rows.Count() >= index)
        {
            var item = this.table.Rows[index];
            this.table.Rows.Remove(item);

            await this.excelService.SetUser(session.User, table);

            this.StateHasChanged();
        }
    }

    private async void OnSaveColumn(int index, string value)
    {

        this.table.Columns[index] = value;

        await this.excelService.SetUser(session.User, this.table);
    }

    private async void Edit(RowCellExcel row)
    {

        DialogParameters parameters = new()
            {
                Title = $"Editing"
            };


        EditDialog dialogMessage = new()
            {
                RowExcel = row,
                Save = ((row) => this.OnSave(row)),
                TableExcel = table
            };


        IDialogReference _dialogTable = await DialogService.ShowDialogAsync<EditDialog>(dialogMessage, parameters);
    }

    private async void AddNew()
    {
        IList<string> columns = table.Columns;

        RowCellExcel _newRow = RowCellExcel.AddRow(columns, table.Types, table.Rows.Count()+1);

        DialogParameters parameters = new()
            {
                Title = $"Editing"
            };


        EditDialog dialogMessage = new()
            {
                RowExcel = _newRow,
                Save = ((row)=>this.OnSave(row)),
                TableExcel = table
            };


        IDialogReference _dialogTable = await DialogService.ShowDialogAsync<EditDialog>(dialogMessage, parameters);

    }

    private async Task Settings()
    {
        // var parameters = new DialogParameters<SettingsDialog>();
        // parameters.Add(x => x.Columns, this.table.Columns);
        // parameters.Add(x => x.Types, this.table.Types);
        // parameters.Add(x => x.Save, this.OnSaveType);

        // _dialogSettings = DialogService.Show<SettingsDialog>("Simple Dialog", parameters);

        DialogParameters parameters = new()
            {
                Title = $"Editing"
            };


        SettingsDialog dialogMessage = new()
            {
                Columns = this.table.Columns,
                Save = ((row) => this.OnSaveType(row)),
                Types = this.table.Types
            };


        IDialogReference _dialogSettings = await DialogService.ShowDialogAsync<SettingsDialog>(dialogMessage, parameters);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        table = session.User.TableActive;
    }

    public async void OnSaveType(IList<int> types)
    {
        this.table.Types = types;

        await this.excelService.SetUser(session.User, table);

        _dialogSettings.CloseAsync();

    }

    public async void OnSave(RowCellExcel row)
    {
        RowExcel item = null;

        if (this.table.Rows.Count() < row.Id)
        {
            item = row.NewRowExcel();
            this.table.Rows.Add(item);
        }      
        else
            item = this.table.Rows[row.Id];

        for (int i = 0; i < row.Columns.Count; i++)
        {
            item.Values[i] = row.Cells[i].Value;
        }

        await this.excelService.SetUser(session.User, table);

        _dialogTable.CloseAsync();

        this.StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }
}
