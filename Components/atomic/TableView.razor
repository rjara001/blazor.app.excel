@using BlazorAppExcel.Models
@using BlazorAppExcel.Share.Models

@inject IDialogService DialogService

<table class="table">
    <thead>
        <tr>
            @if (AllowedEdit)
            {
                <th colspan="2">Edit</th>
            }
            @foreach (var column in Table.Columns)
            {
                <th><HeaderColumn Value="@column.Value" Name="Column" OnChildParameterChanged="(value)=>SaveColumn(column, value)"></HeaderColumn></th>
            }
        </tr>
    </thead>
    <tbody>
       
        @if (Table!=null)
        {
            rows = SplitListIntoNSublists<RowExcel>(Table.Rows, 20);

            @foreach (var (row, index) in rows[IndexPag - 1].Select((item, index) => (item, index)))
            {
                IList<string> columns = Table.Columns.Select(_ => _.Value).ToList();

                <tr>

                    @if (AllowedEdit)
                    {
                        <td>
                            <button @onclick="@(e => OnEdit(row.getCellExcel(columns, Table.Types, index)))">Edit</button>
                        </td>
                        <td>
                            <button @onclick="@(e => Delete(index))">Delete</button>
                        </td>
                    }

                    @foreach (string cell in @row.Values)
                    {
                        <td>@cell</td>
                    }
                </tr>

            }
        }
  

    </tbody>
</table>

<MudPagination Color="Color.Primary" Count="@rows.Count()" @bind-Selected="@IndexPag" />

@code {
    [Parameter] public Action<RowCellExcel> OnEdit { get; set; }
    [Parameter] public Action<int> OnDelete { get; set; }

    [Parameter] public bool AllowedEdit { get; set; } = false;

    [Parameter] public TableExcel Table { get; set; }

    [Parameter]
    public Action<KeyValuePair<string, string>> OnSaveColumn { get; set; }

    List<List<RowExcel>> rows = new List<List<RowExcel>>();

    public int IndexPag { get; set; } = 1;

    private void SaveColumn(KeyValuePair<string, string> column, string value)
    {
        column = new KeyValuePair<string, string>(column.Key, value);

        OnSaveColumn(column);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async void Delete(int index)
    {
        var parameters = new DialogParameters<SimpleDialog>();
        parameters.Add(x => x.Title, $"Deleting row ({index})");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var _dialog = await DialogService.ShowAsync<SimpleDialog>("Simple Dialog", parameters, options);
        var _result = await _dialog.Result;
        if (Convert.ToBoolean(_result.Data) == true)
        {
            OnDelete(index);
        }
    }

    static List<List<T>> SplitListIntoNSublists<T>(IList<T> originalList, int n)
    {
        List<List<T>> sublists = new List<List<T>>();

        // Calculate the approximate size of each sublist
        int sublistSize = originalList.Count / n;
        int remainder = originalList.Count % n;

        // Distribute the elements evenly into sublists
        int index = 0;
        for (int i = 0; i <= sublistSize; i++)
        {
            List<T> sublist = originalList.Skip(index).Take(n).ToList();
            sublists.Add(sublist);
            index += n;
        }

        return sublists;
    }
}
