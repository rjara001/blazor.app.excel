@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models
@inject NavigationManager NavigationManager;
@inject ISessionSingletonService user;
@inject IDialogService DialogService;
@inject IExcelService excelService;

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>

            @if (!IsTitleEditable)
            {
                <MudText Typo="Typo.h6" onclick="@EnableEditTitle">
                    @Table.Name
                </MudText>
            }
            else
            {
                <MudTextField ShrinkLabel @bind-Value="Table.Name" Label="Tab Name" Variant="Variant.Text" OnBlur="DisableEditTitle"></MudTextField>
            }
        </CardHeaderContent>
        <CardHeaderActions>
           
            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                    <MudMenuItem OnClick="()=> Go()">Edit</MudMenuItem>
                    <MudMenuItem OnClick="() => Delete()">Delete</MudMenuItem>
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2">@getFileNameValue()</MudText>
    </MudCardContent>
    <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => Go()">@getDateCreationValue()</MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter] public TableExcel Table { get; set; }
    [Parameter] public Action<TableExcel> OnDelete { get; set; }
    bool IsTitleEditable = false;

    private async void DisableEditTitle()
    {

        IsTitleEditable = false;

        await this.excelService.SetUser(user.User, Table);
    }

    private void EnableEditTitle()
    {
        IsTitleEditable = !IsTitleEditable;
    }

    private async void Delete()
    {
        var parameters = new DialogParameters<SimpleDialog>();
        parameters.Add(x => x.Title, $"Deleting {Table.Name}");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var _dialog = await DialogService.ShowAsync<SimpleDialog>("Simple Dialog", parameters, options);
        var _result = await _dialog.Result;
        if (Convert.ToBoolean(_result.Data) == true)
            OnDelete(Table);
    }

    public void Go()
    {
        this.user.SetTableActive(Table);

        NavigationManager.NavigateTo($"work/tables/{Table.Name}");
    }

    private string getFileNameValue()
    {
        if (Table.FileName == null)
            return "(value no register)";

        return Table.FileName;
    }

    private string getDateCreationValue()
    {
        if (Table.DateCreation == null)
            return Table.Name;
        return Table.DateCreation.ToLongDateString();
    }
}
