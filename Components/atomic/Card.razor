@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models
@inject NavigationManager NavigationManager;
@inject ISessionSingletonService user;
@inject IExcelService excelService;
@inject IDialogService DialogService;

<FluentCard Width="400px" Height="200px">
      @if (!IsTitleEditable)
            {
        <FluentLabel Typo="Typography.H6" onclick="@EnableEditTitle">
            @Table.Name
        </FluentLabel>
            }
            else
            {
        <FluentTextField @bind-Value=Table.Name AriaLabel="No label" Label="Tab Name" OnBlur="DisableEditTitle"></FluentTextField>
            }

    <FluentFooter>
        <FluentAnchor Href="@($"work/tables/{Table.Name}")" Appearance="Appearance.Hypertext">@Table.DateCreation</FluentAnchor>
    </FluentFooter>
            
</FluentCard>


@code {

    [Parameter] public TableExcel Table { get; set; }
    [Parameter] public Action<TableExcel> OnDelete { get; set; }
    bool IsTitleEditable = false;

    private async void DisableEditTitle()
    {

        IsTitleEditable = false;

        await this.excelService.SetUser(user.User, Table);
    }

    private void EnableEditTitle()
    {
        IsTitleEditable = !IsTitleEditable;
    }

    private async void Delete()
    {
        DialogMessageSimple dialogMessage = new()
            {
                Title = "Deleting Table",
                Message = "You're about to eliminate a Table. Do you want to continue?"
            };

        DialogParameters parameters = new()
            {
                Title = $"Deleting {Table.Name}"
            };


        IDialogReference dialog = await DialogService.ShowDialogAsync<DialogMessageSimple>(parameters);
   
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            OnDelete(Table);
        }

        // var _dialog = await DialogService.ShowAsync<DialogMessage>("Simple Dialog", parameters, options);
        // var _result = await _dialog.Result;
        // if (Convert.ToBoolean(_result.Data) == true)
        //     OnDelete(Table);
    }

    public void Go()
    {
        this.user.SetTableActive(Table);

        NavigationManager.NavigateTo($"work/tables/{Table.Name}");
    }

    private string getFileNameValue()
    {
        if (Table.FileName == null)
            return "(value no register)";

        return Table.FileName;
    }

    private string getDateCreationValue()
    {
        if (Table.DateCreation == null)
            return Table.Name;
        return Table.DateCreation.ToLongDateString();
    }
}
