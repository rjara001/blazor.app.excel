@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models
@using Blazored.LocalStorage
@using System.Data
@using System.Text.Json

@inject IJSRuntime JSRuntime
@inject IExcelService excelService
@inject ILocalStorageService localStore
@inject MudBlazor.IDialogService DialogService
@inject ISessionSingletonService userServices;

<style>
    .data-item {
        white-space: nowrap;
        width: 150px;
        overflow: hidden;
        text-overflow: clip;
    }
</style>

@if (sheetsToSave.Count()>0)
{
    <div class="d-flex flex-column mb-3">
        
        <div class="p-2">
            <Tabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                @for (var index = 0; index < sheetsToSave.Count; index++)
                {
                    var tabName = $"tab-{@index.ToString()}";
                    var tabNameDisplay = sheetsToSave[index].Name;
                    var dsTable = sheetsToSave[index];
                    this.table = dsTable;

                    <Tab Title="@tabNameDisplay">
                        <Content>
                            <TableDynamic table=@dsTable @ref="childComponentRef"></TableDynamic>
                        </Content>
                    </Tab>
                }
            </Tabs>
        </div>
        <div class="p-2"><Button @onclick="@save" Color="ButtonColor.Primary" Size="Size.Small">Save Table</Button></div>
    </div>

    

    
}

<Toasts class="p-3" Messages="messages" Delay="6000" Placement="ToastsPlacement.TopRight" />
<ConfirmDialog @ref="dialog" />

@code {
    private TableDynamic childComponentRef;
    private TableExcel table;

    private ConfirmDialog dialog = default!;


    [Parameter]
    public IList<TableExcel> sheetsToSave { get; set; } = new List<TableExcel>();

    string nameFilter = string.Empty;

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private async Task<bool> UserWantRewriteIt(string name)
    {
        var confirmation = await dialog.ShowAsync(
          title: $"The table '{name}' you are saving already exists.",
          message1: $"And you are about to overwrite it",
          message2: "Do you want to proceed?");

        return confirmation;
    }

    private async void save() {
        // TODO: Validate when we have multiple sheets
        try
        {
            for (var index = 0; index < sheetsToSave.Count; index++)
            {
                TableExcel _table = sheetsToSave[index];
                if (this.userServices.User.Tables.ContainsKey(_table.Name))
                {
                    ShowMessage(ToastType.Warning, $"It was not possible to save it because the table '{_table.Name}' already exists.");
                    // if (await this.UserWantRewriteIt(_table.Name))
                    // {
                    //     await updateTable(_table);
                    // }
                }
                else
                    await saveTable(_table);

            }
        }
        catch (Exception ex)
        {
            
            throw ex;
        }

    }
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message) => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
    // private async Task updateTable(TableExcel table)
    // {
    //     try
    //     {
    //         userServices.User.Tables.Remove(table.Name);
    //         table.Name = nameCode;
    //         user.Tables.Add(nameCode, table);

    //         await this.excelService.SetUser(userServices.User, table);

    //         ShowMessage(ToastType.Primary, "Data overrided succesfully");

    //         this.StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("pas");
    //         throw;
    //     }



    // }
    private async Task saveTable(TableExcel table)
    {
        try
        {
            userServices.User.Tables.Add(table.Name, table);
            await this.excelService.SetUser(userServices.User, table);
            userServices.User.Tables[table.Name].Id = table.Id;

            ShowMessage(ToastType.Primary, "Data has been saved succesfully");

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("pas");
            throw;
        }

 

    }
}
