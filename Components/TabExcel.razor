@using BlazorAppExcel.Components.atomic
@using BlazorAppExcel.Interfaces
@using BlazorAppExcel.Models
@using Blazored.LocalStorage
@using System.Data
@using System.Text.Json

@inject IJSRuntime JSRuntime
@inject IExcelService excelService
@inject ILocalStorageService localStore
@inject MudBlazor.IDialogService DialogService
@inject ISessionSingletonService userServices;

<style>
    .data-item {
        white-space: nowrap;
        width: 150px;
        overflow: hidden;
        text-overflow: clip;
    }
</style>

@if (@ds.Count()>0)
{
    <MudButton OnClick="@save" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small">Save</MudButton>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
  
        @for (var index = 0; index < ds.Count; index++)
        {
            var tabName = $"tab-{@index.ToString()}";
            var tabNameDisplay = ds[index].Name;
            var dsTable = ds[index];
            this.table = dsTable;

            <MudTabPanel Text="@tabNameDisplay">
                <ChildContent>
                    <TableDynamic table=@dsTable @ref="childComponentRef"></TableDynamic>
                </ChildContent>
            </MudTabPanel>
        }
    </MudTabs>
}



@code {
    private TableDynamic childComponentRef;
    private TableExcel table;

    [Parameter]
    public IList<TableExcel> ds { get; set; } = new List<TableExcel>();

    string nameFilter = string.Empty;

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private async void save() {

        for (var index = 0; index < ds.Count; index++)
        {
            TableExcel _table = ds[index];
            await saveTable(_table);
        }
    }

    private async Task saveTable(TableExcel table)
    {

        await this.excelService.SetUser(userServices.User, table);

        this.userServices.User.AddTable(table);
  
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new MudBlazor.DialogParameters<SimpleDialog>();
        parameters.Add(x => x.Title, "Save Succesfully");

        DialogService.Show<SimpleDialog>("Save Succesfully", options);
    }
}
