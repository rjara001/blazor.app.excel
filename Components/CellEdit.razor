@using BlazorAppExcel.Models
@using BlazorAppExcel.Share.Models
@using BlazorAppExcel.Components.Cells

@if (_typeIsWrong)
{
    <CellTextElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellTextElement>
}
else
{
    @switch (Item.Type)
    {
        case (int)Share.Enums.ExcelCellType.String:
            <CellTextElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellTextElement>
            break;
        case (int)Share.Enums.ExcelCellType.Unique:
            <CellAutoCompleteElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter" Values="@UniqueValues"></CellAutoCompleteElement>
            break;
        case (int)Share.Enums.ExcelCellType.DateTime:
            <CellDateTimeElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellDateTimeElement>
            break;
        case (int)Share.Enums.ExcelCellType.Number:
            <CellNumericElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellNumericElement>
            break;
        case (int)Share.Enums.ExcelCellType.Decimal:
            <CellDecimalElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellDecimalElement>
            break;
        case (int)Share.Enums.ExcelCellType.Currency:
            <CellCurrencyElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellCurrencyElement>
            break;
        case (int)Share.Enums.ExcelCellType.Percentage:
            <CellPorcentageElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellPorcentageElement>
            break;
        case (int)Share.Enums.ExcelCellType.Period:
            <CellPeriodElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellPeriodElement>
            break;
        case (int)Share.Enums.ExcelCellType.Boolean:
            <CellBooleanElement Value="@Convert.ToBoolean(Item.Value)" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellBooleanElement>
            break;
        default:
            <CellTextElement Value="@Item.Value" Name="@Item.Name" OnChildParameterChanged="UpdateChildParameter"></CellTextElement>
            break;
    }
}

@code {
    [Parameter] public CellExcel Item { get; set; }
    [Parameter]
    public IList<string> UniqueValues { get; set; }

    private CellContent Content;

    private bool _typeIsWrong = false;

    private void UpdateChildParameter(string value)
    {
        Console.WriteLine("value:" + value);
        Item.Value = value;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Content = new CellContent(Item);

        this._typeIsWrong = !Util.CheckTypes(Item);
    }

    public class CellContent
    {

        public CellContent(CellExcel cellExcel)
        {
            this.Name = cellExcel.Name;
            this._value = cellExcel.Value;
        }
        private string _value;

        public string Value 
        { 
            get
            {
                return this._value;
            } set
            {
                this._value = value;
            } 
        }
        public string Name { get; set; }
    }
}
