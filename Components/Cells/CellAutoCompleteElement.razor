@using System.Globalization
@using static BlazorAppExcel.Components.CellEdit

<MudAutocomplete T="string" Label="@Name" @bind-Value="Value" SearchFunc="@Search"
                 CoerceValue="true"
                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
@code {

    private string _value;

    [Parameter]
    public EventCallback<string> OnChildParameterChanged { get; set; }

    [Parameter]
    public string Value
    {
        get
        {
            return this._value;
        }
        set
        {
            if (_value == value) return;
            this._value = value;
            OnChildParameterChanged.InvokeAsync(value);

        }
    }

    [Parameter] public string Name { get; set; }

    [Parameter] public IList<string> Values { get; set; }

    private string _autocompleteText;

    private void OnComboValueChanged(string value)
    {
        string porcentageValue = Util.ExtractNumberFromString(value, Share.Enums.ExcelCellType.Porcentage);


        try
        {
            double doubleValue = 0;
            doubleValue = Convert.ToDouble(porcentageValue) / 100;
            Value = String.Format("{0:P2}", doubleValue.ToString("P02", CultureInfo.CurrentCulture));
        }
        catch { }

    }

    private void HandleTextChange(string newText)
    {
        _autocompleteText = newText;
    }

    public void HandleBlur(FocusEventArgs args)
    {
        if (!Values.Contains(_autocompleteText))
        {
            Values.Add(_autocompleteText);
        }
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return Values.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
