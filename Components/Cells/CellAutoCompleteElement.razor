@using System.Globalization
@using static BlazorAppExcel.Components.CellEdit

<div class="form-floating mb-3">

    <AutoComplete class="form-control" TItem="KeyValuePair<int,string>" Label="@Name"
                  @bind-Value="Value" 
                    DataProvider="Search"
                  Placeholder="@Name"
                     PropertyName="Value"
                     AdornmentColor="Color.Primary" />

</div>

@code {

    public class Customer
    {
        public string CustomerName { get; set; }
        public int Id { get; set; }

        public Customer(int id, string name)
        {
            this.Id = id;
            this.CustomerName = name;
        }
    }

    public IDictionary<int,string> values;

    private async Task<AutoCompleteDataProviderResult<KeyValuePair<int, string>>> Search(AutoCompleteDataProviderRequest<KeyValuePair<int, string>> request)
    {
        if (values is null)
            values = Values.Select((value, index) => new { Index = index, Value = value })
                                               .ToDictionary(item => item.Index, item => item.Value);


        return await Task.FromResult(request.ApplyTo(values));
        //return Values.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(word => new AutoCompleteDataProviderResult<string>() { Data = customers, TotalCount = customers.Count() });
        // return await Task.FromResult(request.ApplyTo(list));
        //return await Task.FromResult(new AutoCompleteDataProviderResult<string> { Data = list, TotalCount = list.Count() });
    }
   
    private string _value;

    [Parameter]
    public EventCallback<string> OnChildParameterChanged { get; set; }

    [Parameter]
    public string Value
    {
        get
        {
            return this._value;
        }
        set
        {
            if (_value == value) return;
            this._value = value;
            OnChildParameterChanged.InvokeAsync(value);

        }
    }

    [Parameter] public string Name { get; set; }

    [Parameter] public IList<string> Values { get; set; }

    private string _autocompleteText;

    private void OnComboValueChanged(string value)
    {
        string porcentageValue = Util.ExtractNumberFromString(value, Share.Enums.ExcelCellType.Percentage);


        try
        {
            double doubleValue = 0;
            doubleValue = Convert.ToDouble(porcentageValue) / 100;
            Value = String.Format("{0:P2}", doubleValue.ToString("P02", CultureInfo.CurrentCulture));
        }
        catch { }

    }

    private void HandleTextChange(string newText)
    {
        _autocompleteText = newText;
    }

    public void HandleBlur(FocusEventArgs args)
    {
        if (!Values.Contains(_autocompleteText))
        {
            Values.Add(_autocompleteText);
        }
    }

}
